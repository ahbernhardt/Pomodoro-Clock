{"version":3,"sources":["ding.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","$","document","ready","countDownInterval","workLength","shortBreakLength","longBreakLength","seconds","initialSeconds","checks","phaseType","countDown","html","setTime","timeEndSound","eq","css","clearChecks","displayTime","stopTimer","clearInterval","resetTimer","validifyInput","element","newValue","Math","max","min","parseInt","val","s","floor","slice","ctx","getElementById","getContext","clearRect","beginPath","moveTo","arc","PI","lineTo","fillStyle","fill","draw","id","play","time","click","setInterval","input","this","siblings","on","value","number","replace","App","className","src","ding","ref","audio","type","name","aria-hidden","width","height","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb6377d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ding.83c0a7e8.mp3\";","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport './App.css';\nimport ding from \"./ding.mp3\";\n\n  $(document).ready(function() {\n    let workLength = 25 * 60;\n    let shortBreakLength = 5 * 60;\n    let longBreakLength = 15 * 60;\n    let seconds = workLength;\n    let initialSeconds = workLength;\n    let checks = 0;\n    let phaseType = 0; // 0 = work phase, 1 = break phase (both short and long)\n    let countDownInterval; // interval id\n\n    function countDown() {\n      if (seconds <= 0) {\n        phaseType = (phaseType + 1) % 2; // toggle between phase 0 and 1\n        if (phaseType === 0) {\n          $(\"#phase\").html(\"Work Time\");\n          setTime(workLength);\n          timeEndSound('ding');\n        } else {\n          $(\"#phase\").html(\"Break Time\");\n          if (checks < 4) {\n            //determine short or long break\n            addCheck();\n            timeEndSound('ding');\n            setTime(shortBreakLength);\n          } else {\n            $(\"#phase\").html(\"Long Break Time\");\n            timeEndSound('ding');\n            clearChecks();\n            setTime(longBreakLength);\n          }\n        }\n      }\n      seconds--;\n      displayTime();\n    }\n\n    function startTimer() {\n      if (countDownInterval) {\n        return false;\n      }\n      countDownInterval = setInterval(countDown, 1000);\n    }\n\n    function stopTimer() {\n      clearInterval(countDownInterval);\n      countDownInterval = null;\n    }\n\n    function resetTimer() {\n      stopTimer();\n      setTime(workLength);\n      clearChecks();\n      displayTime();\n    }\n\n    // timer controls\n    $(\".start-timer\").click(startTimer);\n    $(\".stop-timer\").click(stopTimer);\n    $(\".reset-timer\").click(resetTimer);\n\n    // + and - buttons\n    $(\".length-setter\").click(function() {\n      const input = $(this).siblings(\"input\");\n      if ($(this).html() === \"-\") {\n        input.val(parseInt(input.val()) - 1);\n      } else if ($(this).html() === \"+\") {\n        input.val(parseInt(input.val()) + 1);\n      } else {\n        // should be unreachable\n      }\n      validifyInput(input);\n    });\n\n    // option input events\n    $(\"#options input[type=text]\").on(\"input\", function() {\n      // prevent non-number input\n      if (this.value) {\n        const number = this.value.replace(/[^0-9]/g, \"\");\n        $(this).val(number);\n        validifyInput($(this));\n      } else {\n        $(this).val(\"1\");\n      }\n    });\n\n    function validifyInput(element) {\n      // force input to be between 1 to 999\n      const newValue = Math.max(1, Math.min(parseInt(element.val()), 100)) || 1;\n      element.val(newValue);\n      updateOptions();\n    }\n\n    function updateOptions() {\n      workLength = $(\"input[name=work-length]\").val() * 60;\n      shortBreakLength = $(\"input[name=short-break-length]\").val() * 60;\n      longBreakLength = $(\"input[name=long-break-length]\").val() * 60;\n      resetTimer();\n    }\n\n    // canvas clock\n    function draw() {\n      const ctx = document.getElementById(\"timer-canvas\").getContext(\"2d\");\n      // clear canvas\n      ctx.clearRect(0, 0, 300, 300);\n      // draw circle\n      ctx.beginPath();\n      ctx.moveTo(120, 120);\n      ctx.arc(\n          120,\n          120,\n          120,\n          -0.5 * Math.PI,\n          -0.5 * Math.PI +\n          (initialSeconds - seconds) / initialSeconds * (2 * Math.PI)\n      );\n      ctx.lineTo(120, 120);\n      ctx.fillStyle = \"#00ffb2\";\n      ctx.fill();\n    }\n\n    function formatSeconds(s) {\n      const minutes = Math.floor(s / 60);\n      const seconds = (\"00\" + s % 60).slice(-2);\n      return minutes + \":\" + seconds;\n    }\n\n    function displayTime() {\n      $(\"#timer\").html(formatSeconds(seconds));\n      draw();\n    }\n\n    function addCheck() {\n      $(\".check\").eq(checks).css(\"opacity\", \"1.0\");\n      checks++;\n    }\n\n    function clearChecks() {\n      $(\".check\").css(\"opacity\", \"\");\n      checks = 0;\n    }\n\n    function timeEndSound(id) {\n      const ding = document.getElementById(id); // interval id\n      ding.play();\n    }\n\n    function setTime(time) {\n      seconds = time;\n      initialSeconds = time;\n    }\n  }\n);\n\nclass App extends Component {\n  render() {\n    return (\n        <div id=\"container\" className=\"App\">\n          <audio\n              id=\"ding\" src={ding}\n              ref={(audio) => {\n                this.timeEndSound = audio;\n              }}\n          />\n          <div id=\"content\">\n            <div id=\"title\" className=\"large\">Pomodoro Timer</div>\n            <div id=\"options\">\n              {/* WORK TIME */}\n              <div className=\"timer-option\">\n                <div>Work Length</div>\n                <button className=\"length-setter\">-</button>\n                <input type=\"text\" name=\"work-length\" value=\"25\" />\n                <button className=\"length-setter\">+</button>\n              </div>\n\n              {/* SHORT BREAK */}\n              <div className=\"timer-option\">\n                <div>Break Length (Short)</div>\n                <button className=\"length-setter\">-</button>\n                <input type=\"text\" name=\"short-break-length\" value=\"5\" />\n                <button className=\"length-setter\">+</button>\n              </div>\n\n              {/* LONG BREAK */}\n              <div className=\"timer-option\">\n                <div>Break Length (Long)</div>\n                <button className=\"length-setter\">-</button>\n                <input type=\"text\" name=\"long-break-length\" value=\"15\" />\n                <button className=\"length-setter\">+</button>\n              </div>\n\n            </div>\n\n            {/* CHECKS*/}\n            <div id=\"checks\">\n              <span className=\"check\"><i className=\"fa fa-check fa-2x\" aria-hidden=\"true\"/></span>\n              <span className=\"check\"><i className=\"fa fa-check fa-2x\" aria-hidden=\"true\"/></span>\n              <span className=\"check\"><i className=\"fa fa-check fa-2x\" aria-hidden=\"true\"/></span>\n              <span className=\"check\"><i className=\"fa fa-check fa-2x\" aria-hidden=\"true\"/></span>\n            </div>\n\n            <div>\n              <div id=\"phase\">\n                Work Time\n              </div>\n              <div id=\"timer-container\">\n                <div id=\"timer\" className=\"large\">\n                  25:00\n                </div>\n                <canvas id=\"timer-canvas\" width=\"280\" height=\"280\"/>\n              </div>\n            </div>\n\n            <div id=\"timer-controls\">\n              <button className=\"start-timer\">Start Timer</button>\n              <button className=\"stop-timer\">Stop Timer</button>\n              <button className=\"reset-timer\">Reset Timer</button>\n            </div>\n          </div>\n          <footer className=\"footer\">\n            <p>\n              2020 ©\n              <a className=\"footer-link\" href=\"https://github.com/anguyen0208\" target=\"_blank\" rel=\"noopener noreferrer\">\n                anhnguyen.page\n              </a>\n              <span> </span>\n              <span>\n                Repo Link: {'  '}\n                    <a className=\"footer-link\" href=\"https://github.com/anguyen0208/Pomodoro-Clock\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    <i className=\"fab fa-github\" />\n                </a>\n              </span>\n            </p>\n          </footer>\n        </div>\n    )\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}